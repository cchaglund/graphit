{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef(); // const [ height, setHeight ] = useState(props.height);\n\n  const updateData = data => {\n    g.exit().remove();\n    g.selectAll('rect').data(Object.keys(fields), d => d).enter().append('rect').merge(g).attrs({\n      x: 20,\n      y: (d, i) => 25 * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: 'blue'\n    });\n    g.selectAll('text').data(Object.keys(fields), d => d).enter().append('text').text(d => d).attrs({\n      x: 0,\n      y: (d, i) => 25 * i + 17,\n      height: 20,\n      fill: `#${textColor}`\n    });\n  };\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n  let svg = d3.select(svgRef.current).style('display', 'block').style('background-color', `#${backgroundColor}`).attrs({\n    height: dataDomain.length * 30\n  });\n  let g = d3.select(gRef.current);\n  console.log(fields);\n  useEffect(() => {\n    updateData(g); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: gRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","useState","d3","Graph","fields","backgroundColor","textColor","width","svgRef","createRef","gRef","updateData","data","g","exit","remove","selectAll","Object","keys","d","enter","append","merge","attrs","x","y","i","height","xScale","fill","text","dataDomain","map","field","parseInt","scaleLinear","domain","max","range","svg","select","current","style","length","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,oBAAP;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,eAAT;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA;AAArC,CAAD,KAAiD;AAC3D,QAAMC,MAAM,GAAGT,KAAK,CAACU,SAAN,EAAf,CAD2D,CAE3D;;AACA,QAAMC,IAAI,GAAGX,KAAK,CAACU,SAAN,EAAb,CAH2D,CAK3D;;AAEA,QAAME,UAAU,GAAIC,IAAD,IAAU;AACzBC,IAAAA,CAAC,CAACC,IAAF,GAASC,MAAT;AACAF,IAAAA,CAAC,CAACG,SAAF,CAAY,MAAZ,EACKJ,IADL,CACUK,MAAM,CAACC,IAAP,CAAYd,MAAZ,CADV,EAC+Be,CAAC,IAAIA,CADpC,EAEKC,KAFL,GAEaC,MAFb,CAEoB,MAFpB,EAE4BC,KAF5B,CAEkCT,CAFlC,EAGKU,KAHL,CAGW;AACHC,MAAAA,CAAC,EAAE,EADA;AAEHC,MAAAA,CAAC,EAAE,CAACN,CAAD,EAAIO,CAAJ,KAAU,KAAKA,CAFf;AAGHC,MAAAA,MAAM,EAAE,EAHL;AAIHpB,MAAAA,KAAK,EAAEY,CAAC,IAAIS,MAAM,CAACxB,MAAM,CAACe,CAAD,CAAP,CAJf;AAKHU,MAAAA,IAAI,EAAE;AALH,KAHX;AAWAhB,IAAAA,CAAC,CAACG,SAAF,CAAY,MAAZ,EACKJ,IADL,CACUK,MAAM,CAACC,IAAP,CAAYd,MAAZ,CADV,EAC+Be,CAAC,IAAIA,CADpC,EAEKC,KAFL,GAEaC,MAFb,CAEoB,MAFpB,EAGKS,IAHL,CAGUX,CAAC,IAAIA,CAHf,EAIKI,KAJL,CAIW;AACHC,MAAAA,CAAC,EAAE,CADA;AAEHC,MAAAA,CAAC,EAAE,CAACN,CAAD,EAAIO,CAAJ,KAAW,KAAKA,CAAN,GAAW,EAFrB;AAGHC,MAAAA,MAAM,EAAE,EAHL;AAIHE,MAAAA,IAAI,EAAG,IAAGvB,SAAU;AAJjB,KAJX;AAUH,GAvBD;;AAyBA,QAAMyB,UAAU,GAAGd,MAAM,CAACC,IAAP,CAAYd,MAAZ,EAAoB4B,GAApB,CAAyBC,KAAK,IAAI;AAC7C,WAAOC,QAAQ,CAAC9B,MAAM,CAAC6B,KAAD,CAAP,CAAf;AACH,GAFc,CAAnB;AAII,QAAML,MAAM,GAAG1B,EAAE,CAACiC,WAAH,GACVC,MADU,CACH,CAAE,CAAF,EAAKlC,EAAE,CAACmC,GAAH,CAAON,UAAP,CAAL,CADG,EAEVO,KAFU,CAEJ,CAAE,CAAF,EAAK/B,KAAL,CAFI,CAAf;AAIA,MAAIgC,GAAG,GAAGrC,EAAE,CAACsC,MAAH,CAAUhC,MAAM,CAACiC,OAAjB,EACLC,KADK,CACC,SADD,EACY,OADZ,EAELA,KAFK,CAEC,kBAFD,EAEsB,IAAGrC,eAAgB,EAFzC,EAGLkB,KAHK,CAGC;AACHI,IAAAA,MAAM,EAAEI,UAAU,CAACY,MAAX,GAAoB;AADzB,GAHD,CAAV;AAOA,MAAI9B,CAAC,GAAGX,EAAE,CAACsC,MAAH,CAAU9B,IAAI,CAAC+B,OAAf,CAAR;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYzC,MAAZ;AAIJJ,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU,CAACE,CAAD,CAAV,CADY,CAGZ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhBQ,CAAT;AAkBA,SACI;AAAK,IAAA,GAAG,EAAGL,MAAX;AAAoB,IAAA,KAAK,EAAED,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,GAAG,EAAGG,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAaH,CApFD;;AAsFA,eAAeP,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    // const [ height, setHeight ] = useState(props.height);\n\n    const updateData = (data) => {\n        g.exit().remove()\n        g.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n            .enter().append('rect').merge(g)\n            .attrs({\n                x: 20,\n                y: (d, i) => 25 * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: 'blue'\n            })\n\n        g.selectAll('text')\n            .data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (25 * i) + 17,\n                height: 20,\n                fill: `#${textColor}`,\n            })\n    }\n\n    const dataDomain = Object.keys(fields).map( field => {\n            return parseInt(fields[field]);\n        })\n\n        const xScale = d3.scaleLinear()\n            .domain([ 0, d3.max(dataDomain)])\n            .range([ 0, width])\n\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * 30\n            })\n        \n        let g = d3.select(gRef.current)\n\n        console.log(fields)\n\n        \n\n    useEffect(() => {\n        updateData(g)\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    return(\n        <svg ref={ svgRef } width={width}>\n            <g ref={ gRef }>\n                {/* <rect\n                    ref={recRef}\n                    x={0} \n                    y={0} \n                    height={ height } \n                    width={ props.width } \n                    fill={'#575757'} /> */}\n            </g>\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}