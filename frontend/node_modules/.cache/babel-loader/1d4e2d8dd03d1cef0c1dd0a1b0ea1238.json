{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  barsColor,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef();\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateData = () => {\n    console.log(title);\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding\n    });\n    const header = svg.enter().append('text').append('text').text(title);\n    let g = d3.select(gRef.current);\n    const rects = g.selectAll('rect').data(Object.keys(fields), d => d);\n    rects.enter().append('rect').merge(rects).attrs({\n      x: 20,\n      y: (d, i) => padding * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: `#${barsColor}`\n    });\n    const texts = g.selectAll('text').data(Object.keys(fields), d => d);\n    texts.enter().append('text').merge(texts).text(d => d).attrs({\n      x: 0,\n      y: (d, i) => padding * i + 17,\n      height: 20,\n      fill: `#${textColor}`\n    });\n    g.exit().remove();\n    header.exit().remove();\n    rects.exit().remove();\n    texts.exit().remove();\n  };\n\n  useEffect(() => {\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: gRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","d3","Graph","fields","backgroundColor","barsColor","title","padding","textColor","width","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","updateData","console","log","svg","select","current","style","attrs","height","length","header","enter","append","text","g","rects","selectAll","data","d","merge","x","y","i","fill","texts","exit","remove"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, barsColor, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n\n\n    const updateData = () => {\n        console.log(title)\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding\n            })\n\n        const header = svg.enter().append('text')\n            .append('text')\n            .text(title)\n\n        let g = d3.select(gRef.current)\n\n        const rects = g.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n\n        rects.enter().append('rect').merge(rects)\n            .attrs({\n                x: 20,\n                y: (d, i) => padding * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: `#${barsColor}`\n            })\n\n        const texts = g.selectAll('text')\n            .data(Object.keys(fields), d => d)\n\n        texts.enter().append('text').merge(texts)\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (padding * i) + 17,\n                height: 20,\n                fill: `#${textColor}`,\n            })\n\n        g.exit().remove()\n        header.exit().remove()\n        rects.exit().remove()\n        texts.exit().remove()\n    }\n\n    \n\n    useEffect(() => {\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            <g ref={ gRef }>\n            </g>\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}