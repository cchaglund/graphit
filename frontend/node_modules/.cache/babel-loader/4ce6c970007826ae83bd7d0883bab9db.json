{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/PieChart.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst PieChart = ({\n  fields,\n  labelCharLength,\n  backgroundColor,\n  barThickness,\n  barsColor,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  }); // const xScale = d3.scaleLinear()\n  //     .domain([ 0, d3.max(dataDomain)])\n  //     .range([ 0, width])\n\n  const updatePieChart = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding + (title ? 50 : 0) + barThickness * dataDomain.length\n    });\n    svg.selectAll('g').remove(); // clear all previous gs\n    // let graphic = svg.append('g') // adds a new g\n\n    const header = svg.selectAll('text');\n    createAndOrUpdateHeader(header); // const arcs = svg.select('g').append('g').selectAll('path')\n    // createAndOrUpdateArcs(arcs)\n\n    const texts = svg.select('g').append('g').selectAll('text');\n    createAndOrUpdateTexts(texts);\n    /* These don't seem to do anything */\n    // graphic.exit().remove()\n    // header.exit().remove()\n    // arcs.exit().remove()\n    // texts.exit().remove()\n  };\n\n  const createAndOrUpdateHeader = header => {\n    header.data([title]).enter().insert('text').merge(header).text(d => d).attr('text-anchor', 'middle').attrs({\n      y: padding,\n      x: width / 2,\n      width: 20,\n      height: 20,\n      fill: 'white'\n    });\n  };\n\n  const createAndOrUpdateArcs = arcs => {\n    const pieGenerator = d3.pie();\n    const arcData = pieGenerator(dataDomain);\n    console.log(arcs);\n    const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);\n    arcs.data(arcData).enter().append('path').attr('d', arcGenerator); // .merge(arcs)\n    // .transition()\n    // .duration(400)\n    // .ease(d3.easeQuadOut)\n  };\n\n  const createAndOrUpdateTexts = texts => {\n    texts.data(Object.keys(fields), d => d).enter().append('text').merge(texts).text(d => d).attr('text-anchor', 'end').attrs({\n      x: 8 * labelCharLength,\n      y: (d, i) => padding * i + 17 + (title ? 50 : 0) + barThickness * i,\n      height: barThickness,\n      fill: `#${textColor}`\n    });\n  };\n\n  useEffect(() => {\n    updatePieChart(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  });\n};\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/PieChart.jsx"],"names":["React","useEffect","d3","PieChart","fields","labelCharLength","backgroundColor","barThickness","barsColor","title","padding","textColor","width","svgRef","createRef","dataDomain","Object","keys","map","field","parseInt","updatePieChart","svg","select","current","style","attrs","height","length","selectAll","remove","header","createAndOrUpdateHeader","texts","append","createAndOrUpdateTexts","data","enter","insert","merge","text","d","attr","y","x","fill","createAndOrUpdateArcs","arcs","pieGenerator","pie","arcData","console","log","arcGenerator","arc","innerRadius","outerRadius","i"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst PieChart = ({fields, labelCharLength, backgroundColor, barThickness, barsColor, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    // const xScale = d3.scaleLinear()\n    //     .domain([ 0, d3.max(dataDomain)])\n    //     .range([ 0, width])\n\n    const updatePieChart = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding + (title ? 50 : 0) + (barThickness * dataDomain.length),\n            })\n        \n        svg.selectAll('g').remove() // clear all previous gs\n        // let graphic = svg.append('g') // adds a new g\n\n        const header = svg.selectAll('text')\n        createAndOrUpdateHeader(header)\n\n        // const arcs = svg.select('g').append('g').selectAll('path')\n        // createAndOrUpdateArcs(arcs)\n\n        const texts = svg.select('g').append('g').selectAll('text')\n        createAndOrUpdateTexts(texts)\n\n        /* These don't seem to do anything */\n        // graphic.exit().remove()\n        // header.exit().remove()\n        // arcs.exit().remove()\n        // texts.exit().remove()\n    }\n\n    const createAndOrUpdateHeader = (header) => {\n        header.data([title])\n            .enter()\n            .insert('text')\n            .merge(header)\n            .text(d => d)\n            .attr('text-anchor', 'middle')\n            .attrs({\n                y: padding,\n                x: width/2,\n                width: 20,\n                height: 20,\n                fill: 'white'\n            })\n    }\n\n    const createAndOrUpdateArcs = (arcs) => {\n        const pieGenerator = d3.pie();\n\n        const arcData = pieGenerator(dataDomain);\n\n        console.log(arcs)\n\n        const arcGenerator = d3.arc()\n            .innerRadius(50)\n            .outerRadius(100);\n\n        arcs.data(arcData)\n            .enter().append('path')\n            .attr('d', arcGenerator)\n            // .merge(arcs)\n            // .transition()\n            // .duration(400)\n            // .ease(d3.easeQuadOut)\n    }\n\n    const createAndOrUpdateTexts = (texts) => {\n        texts.data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .merge(texts)\n            .text(d => d)\n            .attr('text-anchor', 'end')\n            .attrs({\n                x: 8 * labelCharLength,\n                y: (d, i) => (padding * i) + 17 + (title ? 50 : 0) + (barThickness * i),\n                height: barThickness,\n                fill: `#${textColor}`,\n            })\n    }\n\n    \n\n    useEffect(() => {\n        updatePieChart()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            {/* <g ref={ gRef }>\n            </g> */}\n        </svg>\n    )\n}\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}