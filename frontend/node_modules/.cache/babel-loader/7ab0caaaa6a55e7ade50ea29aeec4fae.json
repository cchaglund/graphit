{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  barsColor,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef();\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateData = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding\n    });\n    const header = svg.selectAll('text');\n    createAndOrUpdateHeader(header);\n    svg.selectAll('g').remove(); // clear all previous gs\n\n    let graphic = svg.append('g'); // adds a new g\n\n    const rects = graphic.selectAll('rect');\n    rects.data(Object.keys(fields), d => d).enter().append('rect').merge(rects).attrs({\n      x: 20,\n      y: (d, i) => padding * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: `#${barsColor}`\n    });\n    const texts = graphic.selectAll('text');\n    texts.data(Object.keys(fields), d => d).enter().append('text').merge(texts).text(d => d).attrs({\n      x: 0,\n      y: (d, i) => padding * i + 17,\n      height: 20,\n      fill: `#${textColor}`\n    });\n    /* These don't seem to do anything */\n    // graphic.exit().remove()\n    // header.exit().remove()\n    // rects.exit().remove()\n    // texts.exit().remove()\n  };\n\n  const createAndOrUpdateHeader = header => {\n    header.data([title]).enter().insert('text').merge(header).text(d => d).attrs({\n      y: padding,\n      x: 10,\n      width: 20,\n      height: 20,\n      fill: 'white'\n    });\n  };\n\n  useEffect(() => {\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  });\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","d3","Graph","fields","backgroundColor","barsColor","title","padding","textColor","width","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","updateData","svg","select","current","style","attrs","height","length","header","selectAll","createAndOrUpdateHeader","remove","graphic","append","rects","data","d","enter","merge","x","y","i","fill","texts","text","insert"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, barsColor, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n    const updateData = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding\n            })\n        \n        const header = svg.selectAll('text')\n        createAndOrUpdateHeader(header)\n\n        svg.selectAll('g').remove() // clear all previous gs\n\n        let graphic = svg.append('g') // adds a new g\n\n        const rects = graphic.selectAll('rect')\n        rects.data(Object.keys(fields), d => d)\n            .enter().append('rect')\n            .merge(rects)\n            .attrs({\n                x: 20,\n                y: (d, i) => padding * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: `#${barsColor}`\n            })\n\n        const texts = graphic.selectAll('text')\n        texts.data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .merge(texts)\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (padding * i) + 17,\n                height: 20,\n                fill: `#${textColor}`,\n            })\n\n        /* These don't seem to do anything */\n        // graphic.exit().remove()\n        // header.exit().remove()\n        // rects.exit().remove()\n        // texts.exit().remove()\n    }\n\n    const createAndOrUpdateHeader = (header) => {\n        header.data([title])\n            .enter()\n            .insert('text')\n            .merge(header)\n            .text(d => d)\n            .attrs({\n                y: padding,\n                x: 10,\n                width: 20,\n                height: 20,\n                fill: 'white'\n            })\n    }\n\n    \n\n    useEffect(() => {\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            {/* <g ref={ gRef }>\n            </g> */}\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}