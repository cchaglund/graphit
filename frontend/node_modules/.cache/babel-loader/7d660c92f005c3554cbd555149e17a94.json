{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  barsColor,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef();\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateData = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding\n    });\n    const header = svg.selectAll('text').data([title]);\n    header.enter().insert('text').merge(header).text(d => d).attrs({\n      y: padding,\n      x: 10,\n      width: 20,\n      height: 20,\n      fill: 'white'\n    }); // const header = svg.selectAll('text')\n    //     .data([title])\n    // header.enter().append('text').merge(header)\n    //     .text(title)\n\n    svg.selectAll('g').remove(); // clear all previous gs\n\n    let graphic = svg.append('g'); // adds a new g\n\n    const rects = graphic.selectAll('rect').data(Object.keys(fields), d => d).enter().append('rect').merge(this);\n    rects.attrs({\n      x: 20,\n      y: (d, i) => padding * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: `#${barsColor}`\n    });\n    const texts = graphic.selectAll('text').data(Object.keys(fields), d => d);\n    texts.enter().append('text').merge(texts).text(d => d).attrs({\n      x: 0,\n      y: (d, i) => padding * i + 17,\n      height: 20,\n      fill: `#${textColor}`\n    });\n    graphic.exit().remove();\n    header.exit().remove();\n    rects.exit().remove();\n    texts.exit().remove();\n  };\n\n  useEffect(() => {\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  });\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","d3","Graph","fields","backgroundColor","barsColor","title","padding","textColor","width","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","updateData","svg","select","current","style","attrs","height","length","header","selectAll","data","enter","insert","merge","text","d","y","x","fill","remove","graphic","append","rects","i","texts","exit"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, barsColor, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n\n\n    const updateData = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding\n            })\n        \n        const header = svg.selectAll('text').data([title])\n\n        header.enter()\n            .insert('text')\n            .merge(header)\n            .text(d => d)\n            .attrs({\n                y: padding,\n                x: 10,\n                width: 20,\n                height: 20,\n                fill: 'white'\n            })\n\n        // const header = svg.selectAll('text')\n        //     .data([title])\n\n        // header.enter().append('text').merge(header)\n        //     .text(title)\n\n        svg.selectAll('g').remove() // clear all previous gs\n\n        let graphic = svg.append('g') // adds a new g\n\n        const rects = graphic.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n            .enter().append('rect').merge(this)\n\n        rects.attrs({\n                x: 20,\n                y: (d, i) => padding * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: `#${barsColor}`\n            })\n\n        const texts = graphic.selectAll('text')\n            .data(Object.keys(fields), d => d)\n\n        texts.enter().append('text').merge(texts)\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (padding * i) + 17,\n                height: 20,\n                fill: `#${textColor}`,\n            })\n\n        graphic.exit().remove()\n        header.exit().remove()\n        rects.exit().remove()\n        texts.exit().remove()\n    }\n\n    \n\n    useEffect(() => {\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            {/* <g ref={ gRef }>\n            </g> */}\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}