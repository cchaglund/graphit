{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  labelCharLength,\n  backgroundColor,\n  barThickness,\n  barsColor,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateGraph = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding + (title ? 50 : 0) + barThickness * dataDomain.length\n    });\n    svg.selectAll('g').remove(); // clear all previous gs\n\n    let graphic = svg.append('g'); // adds a new g\n\n    const header = svg.selectAll('text');\n    createAndOrUpdateHeader(header);\n    const rects = graphic.selectAll('rect');\n    createAndOrUpdateRectangles(rects);\n    const shadows = graphic.selectAll('rect');\n    createAndOrUpdateRectangles(shadows, true);\n    const texts = graphic.selectAll('text');\n    createAndOrUpdateTexts(texts);\n    /* These don't seem to do anything */\n    // graphic.exit().remove()\n    // header.exit().remove()\n    // rects.exit().remove()\n    // texts.exit().remove()\n  };\n\n  const createAndOrUpdateHeader = header => {\n    header.data([title]).enter().insert('text').merge(header).text(d => d).attr('text-anchor', 'middle').attrs({\n      y: padding,\n      x: width / 2,\n      width: 20,\n      height: 20,\n      fill: 'white'\n    });\n  };\n\n  const createAndOrUpdateRectangles = (rects, shadows) => {\n    rects.data(Object.keys(fields), d => d).enter().append('rect').merge(rects).attrs({\n      x: 10 * labelCharLength + (shadows ? 10 : 0),\n      y: (d, i) => padding * i + (title ? 50 : 0) + barThickness * i,\n      height: barThickness,\n      width: 0,\n      fill: `#${barsColor}`\n    }).transition().duration(400).ease(d3.easeQuadOut).attrs({\n      width: d => xScale(fields[d])\n    });\n  };\n\n  const createAndOrUpdateTexts = texts => {\n    texts.data(Object.keys(fields), d => d).enter().append('text').merge(texts).text(d => d).attr('text-anchor', 'end').attrs({\n      x: 8 * labelCharLength,\n      y: (d, i) => padding * i + 17 + (title ? 50 : 0) + barThickness * i,\n      height: barThickness,\n      fill: `#${textColor}`\n    });\n  };\n\n  useEffect(() => {\n    updateGraph(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  });\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","d3","Graph","fields","labelCharLength","backgroundColor","barThickness","barsColor","title","padding","textColor","width","svgRef","createRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","updateGraph","svg","select","current","style","attrs","height","length","selectAll","remove","graphic","append","header","createAndOrUpdateHeader","rects","createAndOrUpdateRectangles","shadows","texts","createAndOrUpdateTexts","data","enter","insert","merge","text","d","attr","y","x","fill","i","transition","duration","ease","easeQuadOut"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, labelCharLength, backgroundColor, barThickness, barsColor, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n    const updateGraph = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding + (title ? 50 : 0) + (barThickness * dataDomain.length),\n            })\n        \n        svg.selectAll('g').remove() // clear all previous gs\n        let graphic = svg.append('g') // adds a new g\n\n        const header = svg.selectAll('text')\n        createAndOrUpdateHeader(header)\n\n        const rects = graphic.selectAll('rect')\n        createAndOrUpdateRectangles(rects)\n\n        const shadows = graphic.selectAll('rect')\n        createAndOrUpdateRectangles(shadows, true)\n\n        const texts = graphic.selectAll('text')\n        createAndOrUpdateTexts(texts)\n\n        /* These don't seem to do anything */\n        // graphic.exit().remove()\n        // header.exit().remove()\n        // rects.exit().remove()\n        // texts.exit().remove()\n    }\n\n    const createAndOrUpdateHeader = (header) => {\n        header.data([title])\n            .enter()\n            .insert('text')\n            .merge(header)\n            .text(d => d)\n            .attr('text-anchor', 'middle')\n            .attrs({\n                y: padding,\n                x: width/2,\n                width: 20,\n                height: 20,\n                fill: 'white'\n            })\n    }\n\n    const createAndOrUpdateRectangles = (rects, shadows) => {\n        rects.data(Object.keys(fields), d => d)\n            .enter().append('rect')\n            .merge(rects)\n            .attrs({\n                x: 10 * labelCharLength + (shadows ? 10 : 0),\n                y: (d, i) => (padding * i) + (title ? 50 : 0) + (barThickness * i),\n                height: barThickness,\n                width: 0,\n                fill: `#${barsColor}`\n            })\n            .transition()\n            .duration(400)\n            .ease(d3.easeQuadOut)\n            .attrs({\n                width: d => xScale(fields[d]),\n            })\n    }\n\n    const createAndOrUpdateTexts = (texts) => {\n        texts.data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .merge(texts)\n            .text(d => d)\n            .attr('text-anchor', 'end')\n            .attrs({\n                x: 8 * labelCharLength,\n                y: (d, i) => (padding * i) + 17 + (title ? 50 : 0) + (barThickness * i),\n                height: barThickness,\n                fill: `#${textColor}`,\n            })\n    }\n\n    \n\n    useEffect(() => {\n        updateGraph()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            {/* <g ref={ gRef }>\n            </g> */}\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}