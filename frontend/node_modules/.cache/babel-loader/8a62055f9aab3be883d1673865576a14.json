{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  barsColor,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef();\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateData = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * padding\n    });\n    let g = d3.select(gRef.current);\n    const rects = g.selectAll('rect').data(Object.keys(fields), d => d);\n    rects.enter().append('rect').merge(rects).attrs({\n      x: 20,\n      y: (d, i) => padding * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: `#${barsColor}`\n    });\n    const texts = g.selectAll('text').data(Object.keys(fields), d => d);\n    texts.enter().append('text').merge(texts).text(d => d).attrs({\n      x: 0,\n      y: (d, i) => padding * i + 17,\n      height: 20,\n      fill: `#${textColor}`\n    });\n    g.exit().remove();\n    rects.exit().remove();\n    texts.exit().remove();\n  };\n\n  useEffect(() => {\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: gRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","d3","Graph","fields","backgroundColor","barsColor","padding","textColor","width","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","updateData","svg","select","current","style","attrs","height","length","g","rects","selectAll","data","d","enter","append","merge","x","y","i","fill","texts","text","exit","remove"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, barsColor, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n\n\n    const updateData = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * padding\n            })\n\n        let g = d3.select(gRef.current)\n\n        const rects = g.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n\n        rects.enter().append('rect').merge(rects)\n            .attrs({\n                x: 20,\n                y: (d, i) => padding * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: `#${barsColor}`\n            })\n\n        const texts = g.selectAll('text')\n            .data(Object.keys(fields), d => d)\n\n        texts.enter().append('text').merge(texts)\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (padding * i) + 17,\n                height: 20,\n                fill: `#${textColor}`,\n            })\n\n        g.exit().remove()\n        rects.exit().remove()\n        texts.exit().remove()\n    }\n\n    \n\n    useEffect(() => {\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            <g ref={ gRef }>\n            </g>\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}