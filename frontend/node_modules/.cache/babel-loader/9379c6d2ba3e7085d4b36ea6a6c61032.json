{"ast":null,"code":"import _slicedToArray from \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  textColor,\n  width\n}) => {\n  const _useState = useState('000000'),\n        _useState2 = _slicedToArray(_useState, 2),\n        txtColor = _useState2[0],\n        setTxtColor = _useState2[1];\n\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef(); // const [ height, setHeight ] = useState(props.height);\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n  let svg = d3.select(svgRef.current).style('display', 'block').style('background-color', `#${backgroundColor}`).attrs({\n    height: dataDomain.length * 30\n  });\n  let g = d3.select(gRef.current);\n\n  const updateData = g => {\n    g.selectAll('rect').data(Object.keys(fields), d => d).enter().append('rect').merge(g).attrs({\n      x: 20,\n      y: (d, i) => 25 * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: 'blue'\n    });\n    g.selectAll('text').data(Object.keys(fields), d => d).enter().append('text').text(d => d).attrs({\n      x: 0,\n      y: (d, i) => 25 * i + 17,\n      height: 20,\n      fill: `#${txtColor}`\n    });\n    g.exit().remove();\n  };\n\n  useEffect(() => {\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  }); // svg.exit().remove()\n\n  console.log(fields);\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: gRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","useState","d3","Graph","fields","backgroundColor","textColor","width","txtColor","setTxtColor","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","xScale","scaleLinear","domain","max","range","svg","select","current","style","attrs","height","length","g","updateData","selectAll","data","d","enter","append","merge","x","y","i","fill","text","exit","remove","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, textColor, width}) => {\n    const [ txtColor, setTxtColor ] = useState('000000');\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    // const [ height, setHeight ] = useState(props.height);\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n    let svg = d3.select(svgRef.current)\n        .style('display', 'block')\n        .style('background-color', `#${backgroundColor}`)\n        .attrs({\n            height: dataDomain.length * 30\n        })\n    \n    let g = d3.select(gRef.current)\n\n    const updateData = (g) => {\n        g.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n            .enter().append('rect').merge(g)\n            .attrs({\n                x: 20,\n                y: (d, i) => 25 * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: 'blue'\n            })\n\n        g.selectAll('text')\n            .data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (25 * i) + 17,\n                height: 20,\n                fill: `#${txtColor}`,\n            })\n            \n        g.exit().remove()\n    }\n\n    \n\n    useEffect(() => {\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n\n\n\n    // svg.exit().remove()\n\n    console.log(fields)\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            <g ref={ gRef }>\n                {/* <rect\n                    ref={recRef}\n                    x={0} \n                    y={0} \n                    height={ height } \n                    width={ props.width } \n                    fill={'#575757'} /> */}\n            </g>\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}