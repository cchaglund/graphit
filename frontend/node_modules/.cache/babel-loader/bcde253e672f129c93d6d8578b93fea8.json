{"ast":null,"code":"import _slicedToArray from \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({\n  fields,\n  backgroundColor,\n  textColor,\n  width\n}) => {\n  const _useState = useState('000000'),\n        _useState2 = _slicedToArray(_useState, 2),\n        txtColor = _useState2[0],\n        setTxtColor = _useState2[1];\n\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const gRef = React.createRef(); // const [ height, setHeight ] = useState(props.height);\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  });\n  console.log('backgroundColor', backgroundColor);\n  const xScale = d3.scaleLinear().domain([0, d3.max(dataDomain)]).range([0, width]);\n\n  const updateData = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('background-color', `#${backgroundColor}`).attrs({\n      height: dataDomain.length * 30\n    });\n    let g = d3.select(gRef.current); // g.exit().remove()\n\n    const rects = g.selectAll('rect').data(Object.keys(fields), d => d);\n    rects.enter().append('rect').merge(rects).attrs({\n      x: 20,\n      y: (d, i) => 25 * i,\n      height: 20,\n      width: d => xScale(fields[d]),\n      fill: 'blue'\n    });\n    g.selectAll('text').data(Object.keys(fields), d => d).enter().append('text').text(d => d).attrs({\n      x: 0,\n      y: (d, i) => 25 * i + 17,\n      height: 20,\n      fill: `#${txtColor}`\n    });\n    rects.exit().remove();\n  };\n\n  useEffect(() => {\n    console.log('UPDATING');\n    updateData(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  }); // svg.exit().remove()\n\n  console.log(fields);\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: gRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/Graph.jsx"],"names":["React","useEffect","useState","d3","Graph","fields","backgroundColor","textColor","width","txtColor","setTxtColor","svgRef","createRef","gRef","dataDomain","Object","keys","map","field","parseInt","console","log","xScale","scaleLinear","domain","max","range","updateData","svg","select","current","style","attrs","height","length","g","rects","selectAll","data","d","enter","append","merge","x","y","i","fill","text","exit","remove"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst Graph = ({fields, backgroundColor, textColor, width}) => {\n    const [ txtColor, setTxtColor ] = useState('000000');\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n    const gRef = React.createRef();\n\n    // const [ height, setHeight ] = useState(props.height);\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    console.log('backgroundColor', backgroundColor)\n\n    const xScale = d3.scaleLinear()\n        .domain([ 0, d3.max(dataDomain)])\n        .range([ 0, width])\n\n\n\n    const updateData = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: dataDomain.length * 30\n            })\n\n        let g = d3.select(gRef.current)\n\n        // g.exit().remove()\n\n        const rects = g.selectAll('rect')\n            .data(Object.keys(fields), d => d)\n\n        rects.enter().append('rect').merge(rects)\n            .attrs({\n                x: 20,\n                y: (d, i) => 25 * i,\n                height: 20,\n                width: d => xScale(fields[d]),\n                fill: 'blue'\n            })\n\n        g.selectAll('text')\n            .data(Object.keys(fields), d => d)\n            .enter().append('text')\n            .text(d => d)\n            .attrs({\n                x: 0,\n                y: (d, i) => (25 * i) + 17,\n                height: 20,\n                fill: `#${txtColor}`,\n            })\n\n        rects.exit().remove()\n    }\n\n    \n\n    useEffect(() => {\n        console.log('UPDATING')\n        updateData()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n\n\n\n    // svg.exit().remove()\n\n    console.log(fields)\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            <g ref={ gRef }>\n                {/* <rect\n                    ref={recRef}\n                    x={0} \n                    y={0} \n                    height={ height } \n                    width={ props.width } \n                    fill={'#575757'} /> */}\n            </g>\n        </svg>\n    )\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}