{"ast":null,"code":"var _jsxFileName = \"/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/PieChart.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst PieChart = ({\n  fields,\n  labelCharLength,\n  backgroundColor,\n  slicesColor,\n  innerRadius,\n  outerRadius,\n  sectionRoundness,\n  title,\n  padding,\n  textColor,\n  width\n}) => {\n  const svgRef = React.createRef(); // const recRef = React.createRef();\n\n  const dataDomain = Object.keys(fields).map(field => {\n    return parseInt(fields[field]);\n  }); // const xScale = d3.scaleLinear()\n  //     .domain([ 0, d3.max(dataDomain)])\n  //     .range([ 0, width])\n\n  const height = (dataDomain.length * padding + (title ? 50 : 0)) * 2;\n\n  const updatePieChart = () => {\n    let svg = d3.select(svgRef.current).style('display', 'block').style('padding', '2rem').style('background-color', `#${backgroundColor}`).attrs({\n      height: height\n    });\n    svg.selectAll('g').remove(); // clear all previous gs\n    // let graphic = svg.append('g') // adds a new g\n\n    const header = svg.selectAll('text');\n    createAndOrUpdateHeader(header);\n    const arcs = svg.append('g').selectAll('path');\n    createAndOrUpdateArcs(arcs); // const texts = svg.select('g').append('g').selectAll('text')\n    // createAndOrUpdateTexts(texts)\n\n    /* These don't seem to do anything */\n    // graphic.exit().remove()\n    // header.exit().remove()\n    // arcs.exit().remove()\n    // texts.exit().remove()\n  };\n\n  const createAndOrUpdateHeader = header => {\n    header.data([title]).enter().insert('text').merge(header).text(d => d).attr('text-anchor', 'middle').attrs({\n      y: padding,\n      x: width / 2,\n      width: 20,\n      height: 20,\n      fill: 'white'\n    });\n  };\n\n  const createAndOrUpdateArcs = arcs => {\n    const pieGenerator = d3.pie();\n    const arcData = pieGenerator(dataDomain);\n    console.log(arcData);\n    const arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).padRadius(sectionRoundness).padAngle(.02).cornerRadius(5);\n    console.log(arcGenerator);\n    arcs.data(arcData).enter().append('path').merge(arcs).attr('transform', `translate(${width / 2}, ${height / 2})`).attr('d', arcGenerator).style('fill', `#${slicesColor}`).merge(arcs); // .transition()\n    // .duration(400)\n    // .ease(d3.easeQuadOut)\n  }; // const createAndOrUpdateTexts = (texts) => {\n  //     texts.data(Object.keys(fields), d => d)\n  //         .enter().append('text')\n  //         .merge(texts)\n  //         .text(d => d)\n  //         .attr('text-anchor', 'end')\n  //         .attrs({\n  //             x: 8 * labelCharLength,\n  //             y: (d, i) => (padding * i) + 17 + (title ? 50 : 0) + (barThickness * i),\n  //             height: barThickness,\n  //             fill: `#${textColor}`,\n  //         })\n  // }\n\n\n  useEffect(() => {\n    updatePieChart(); // svg.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    // let section = d3.select(recRef.current);\n    // section.transition()\n    //     .duration(300)\n    //     .ease(d3.easeBackInOut)\n    //     .attr('height', props.height)\n    //     .on(\"end\", () =>\n    //         setHeight(props.height)\n    //     );\n  });\n  return React.createElement(\"svg\", {\n    ref: svgRef,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  });\n};\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/christoferhaglund/Documents/Skola/assignments/graphit/src/components/PieChart.jsx"],"names":["React","useEffect","d3","PieChart","fields","labelCharLength","backgroundColor","slicesColor","innerRadius","outerRadius","sectionRoundness","title","padding","textColor","width","svgRef","createRef","dataDomain","Object","keys","map","field","parseInt","height","length","updatePieChart","svg","select","current","style","attrs","selectAll","remove","header","createAndOrUpdateHeader","arcs","append","createAndOrUpdateArcs","data","enter","insert","merge","text","d","attr","y","x","fill","pieGenerator","pie","arcData","console","log","arcGenerator","arc","padRadius","padAngle","cornerRadius"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nconst PieChart = ({fields, labelCharLength, backgroundColor, slicesColor, innerRadius, outerRadius, sectionRoundness, title, padding, textColor, width}) => {\n    const svgRef = React.createRef();\n    // const recRef = React.createRef();\n\n    const dataDomain = Object.keys(fields).map( field => {\n        return parseInt(fields[field]);\n    })\n\n    // const xScale = d3.scaleLinear()\n    //     .domain([ 0, d3.max(dataDomain)])\n    //     .range([ 0, width])\n\n    const height = (dataDomain.length * padding + (title ? 50 : 0)) * 2;\n\n    const updatePieChart = () => {\n        let svg = d3.select(svgRef.current)\n            .style('display', 'block')\n            .style('padding', '2rem')\n            .style('background-color', `#${backgroundColor}`)\n            .attrs({\n                height: height,\n            })\n        \n        svg.selectAll('g').remove() // clear all previous gs\n        // let graphic = svg.append('g') // adds a new g\n\n        const header = svg.selectAll('text')\n        createAndOrUpdateHeader(header)\n\n        const arcs = svg.append('g').selectAll('path')\n        createAndOrUpdateArcs(arcs)\n\n        // const texts = svg.select('g').append('g').selectAll('text')\n        // createAndOrUpdateTexts(texts)\n\n        /* These don't seem to do anything */\n        // graphic.exit().remove()\n        // header.exit().remove()\n        // arcs.exit().remove()\n        // texts.exit().remove()\n    }\n\n    const createAndOrUpdateHeader = (header) => {\n        header.data([title])\n            .enter()\n            .insert('text')\n            .merge(header)\n            .text(d => d)\n            .attr('text-anchor', 'middle')\n            .attrs({\n                y: padding,\n                x: width/2,\n                width: 20,\n                height: 20,\n                fill: 'white'\n            })\n    }\n\n    const createAndOrUpdateArcs = (arcs) => {\n        const pieGenerator = d3.pie();\n\n        const arcData = pieGenerator(dataDomain);\n\n        console.log(arcData)\n\n        const arcGenerator = d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n            .padRadius(sectionRoundness)\n            .padAngle(.02)\n            .cornerRadius(5)\n\n        console.log(arcGenerator)\n\n        arcs.data(arcData)\n            .enter().append('path')\n            .merge(arcs)\n            .attr('transform', `translate(${width / 2}, ${height / 2})`)\n            .attr('d', arcGenerator)\n            .style('fill', `#${slicesColor}`)\n            .merge(arcs)\n            // .transition()\n            // .duration(400)\n            // .ease(d3.easeQuadOut)\n    }\n\n    // const createAndOrUpdateTexts = (texts) => {\n    //     texts.data(Object.keys(fields), d => d)\n    //         .enter().append('text')\n    //         .merge(texts)\n    //         .text(d => d)\n    //         .attr('text-anchor', 'end')\n    //         .attrs({\n    //             x: 8 * labelCharLength,\n    //             y: (d, i) => (padding * i) + 17 + (title ? 50 : 0) + (barThickness * i),\n    //             height: barThickness,\n    //             fill: `#${textColor}`,\n    //         })\n    // }\n\n    \n\n    useEffect(() => {\n        updatePieChart()\n\n        // svg.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n\n        // let section = d3.select(recRef.current);\n        // section.transition()\n        //     .duration(300)\n        //     .ease(d3.easeBackInOut)\n        //     .attr('height', props.height)\n        //     .on(\"end\", () =>\n        //         setHeight(props.height)\n        //     );\n    })\n\n    \n\n    return(\n        <svg ref={ svgRef } width={width}>\n            {/* <g ref={ gRef }>\n            </g> */}\n        </svg>\n    )\n}\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}